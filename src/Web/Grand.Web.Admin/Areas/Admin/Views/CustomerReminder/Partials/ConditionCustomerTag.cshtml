@model CustomerReminderModel.ConditionModel
    @if (String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @Loc["Admin.Customers.CustomerReminder.Condition.SaveBeforeEdit"]
        </div>
    }
    @if (!String.IsNullOrEmpty(Model.Id))
    {

        <div class="panel panel-default">
            <div class="panel-body">
                <div id="customertag-grid"></div>
            </div>
        </div>

        <script>
        $(document).ready(function () {
        $("#customertag-grid").kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("ConditionCustomerTag", "CustomerReminder", new { customerReminderId = Model.CustomerReminderId, conditionId = Model.Id, area = Constants.AreaAdmin }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("ConditionCustomerTagInsert", "CustomerReminder", new { customerReminderId = Model.CustomerReminderId, conditionId = Model.Id, area = Constants.AreaAdmin }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("ConditionDeletePosition", "CustomerReminder", new { customerReminderId = Model.CustomerReminderId, conditionId = Model.Id, area = Constants.AreaAdmin }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            CustomerTag: { editable: true, type: "string" },
                            CustomerTagId: { editable: true, type: "string" },
                            Id: { editable: false, type: "string" }
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function (e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                numeric: false,
                previousNext: false,
                info: false
            },
            toolbar: [{ name: "create", text: "@Loc["Admin.Common.AddNewRecord"]" }, { name: "save", text: "@Loc["Admin.Common.Save"]" }, { name: "cancel", text: "@Loc["Admin.Common.Cancel"]" }],
            editable: {
                confirmation: false,
                mode: "inline",
            },
            scrollable: false,
            columns: [{
                    field: "CustomerTag",
                    title: "@Loc["Admin.Customers.CustomerReminder.Condition.Fields.CustomerTagName"]",
                    width: 200,
                    editor: customerTagDropDownEditor,
                    template: "#:CustomerTag#"
                },
                {
                command: [
                {
                    name: "destroy",
                    text: "@Loc["Admin.Common.Delete"]"
                }],
                width: 200
            }]
        });
    });


    function customerTagDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:CustomerTagId"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource:
                {
                    transport: {
                        read: "@Html.Raw(Url.Action("CustomerTags", "CustomerReminder", new { area = Constants.AreaAdmin }))"
                    }
                },
                optionLabel: " -- Select -- "
            });
        }
        </script>
    }
