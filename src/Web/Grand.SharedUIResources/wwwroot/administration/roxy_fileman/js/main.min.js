var fileTypeIcons = new Object; fileTypeIcons["3gp"] = "file_extension_3gp.png", fileTypeIcons["7z"] = "file_extension_7z.png", fileTypeIcons.ace = "file_extension_ace.png", fileTypeIcons.ai = "file_extension_ai.png", fileTypeIcons.aif = "file_extension_aif.png", fileTypeIcons.aiff = "file_extension_aiff.png", fileTypeIcons.amr = "file_extension_amr.png", fileTypeIcons.asf = "file_extension_asf.png", fileTypeIcons.asx = "file_extension_asx.png", fileTypeIcons.avi = "file_extension_avi.png", fileTypeIcons.bat = "file_extension_bat.png", fileTypeIcons.bin = "file_extension_bin.png", fileTypeIcons.bmp = "file_extension_bmp.png", fileTypeIcons.bup = "file_extension_bup.png", fileTypeIcons.cab = "file_extension_cab.png", fileTypeIcons.cbr = "file_extension_cbr.png", fileTypeIcons.cda = "file_extension_cda.png", fileTypeIcons.cdl = "file_extension_cdl.png", fileTypeIcons.cdr = "file_extension_cdr.png", fileTypeIcons.chm = "file_extension_chm.png", fileTypeIcons.dat = "file_extension_dat.png", fileTypeIcons.divx = "file_extension_divx.png", fileTypeIcons.dll = "file_extension_dll.png", fileTypeIcons.dmg = "file_extension_dmg.png", fileTypeIcons.doc = "file_extension_doc.png", fileTypeIcons.dss = "file_extension_dss.png", fileTypeIcons.dvf = "file_extension_dvf.png", fileTypeIcons.dwg = "file_extension_dwg.png", fileTypeIcons.eml = "file_extension_eml.png", fileTypeIcons.eps = "file_extension_eps.png", fileTypeIcons.exe = "file_extension_exe.png", fileTypeIcons.fla = "file_extension_fla.png", fileTypeIcons.flv = "file_extension_flv.png", fileTypeIcons.gif = "file_extension_gif.png", fileTypeIcons.gz = "file_extension_gz.png", fileTypeIcons.hqx = "file_extension_hqx.png", fileTypeIcons.htm = "file_extension_htm.png", fileTypeIcons.html = "file_extension_html.png", fileTypeIcons.ifo = "file_extension_ifo.png", fileTypeIcons.indd = "file_extension_indd.png", fileTypeIcons.iso = "file_extension_iso.png", fileTypeIcons.jar = "file_extension_jar.png", fileTypeIcons.jpeg = "file_extension_jpeg.png", fileTypeIcons.jpg = "file_extension_jpg.png", fileTypeIcons.lnk = "file_extension_lnk.png", fileTypeIcons.log = "file_extension_log.png", fileTypeIcons.m4a = "file_extension_m4a.png", fileTypeIcons.m4b = "file_extension_m4b.png", fileTypeIcons.m4p = "file_extension_m4p.png", fileTypeIcons.m4v = "file_extension_m4v.png", fileTypeIcons.mcd = "file_extension_mcd.png", fileTypeIcons.mdb = "file_extension_mdb.png", fileTypeIcons.mid = "file_extension_mid.png", fileTypeIcons.mkv = "file_extension_mkv.png", fileTypeIcons.mov = "file_extension_mov.png", fileTypeIcons.mp2 = "file_extension_mp2.png", fileTypeIcons.mp3 = "file_extension_mp3.png", fileTypeIcons.mp4 = "file_extension_mp4.png", fileTypeIcons.mpeg = "file_extension_mpeg.png", fileTypeIcons.mpg = "file_extension_mpg.png", fileTypeIcons.msi = "file_extension_msi.png", fileTypeIcons.mswmm = "file_extension_mswmm.png", fileTypeIcons.ogg = "file_extension_ogg.png", fileTypeIcons.pdf = "file_extension_pdf.png", fileTypeIcons.png = "file_extension_png.png", fileTypeIcons.pps = "file_extension_pps.png", fileTypeIcons.ps = "file_extension_ps.png", fileTypeIcons.psd = "file_extension_psd.png", fileTypeIcons.pst = "file_extension_pst.png", fileTypeIcons.ptb = "file_extension_ptb.png", fileTypeIcons.pub = "file_extension_pub.png", fileTypeIcons.qbb = "file_extension_qbb.png", fileTypeIcons.qbw = "file_extension_qbw.png", fileTypeIcons.qxd = "file_extension_qxd.png", fileTypeIcons.ram = "file_extension_ram.png", fileTypeIcons.rar = "file_extension_rar.png", fileTypeIcons.rm = "file_extension_rm.png", fileTypeIcons.rmvb = "file_extension_rmvb.png", fileTypeIcons.rtf = "file_extension_rtf.png", fileTypeIcons.sea = "file_extension_sea.png", fileTypeIcons.ses = "file_extension_ses.png", fileTypeIcons.sit = "file_extension_sit.png", fileTypeIcons.sitx = "file_extension_sitx.png", fileTypeIcons.ss = "file_extension_ss.png", fileTypeIcons.swf = "file_extension_swf.png", fileTypeIcons.tgz = "file_extension_tgz.png", fileTypeIcons.thm = "file_extension_thm.png", fileTypeIcons.tif = "file_extension_tif.png", fileTypeIcons.tmp = "file_extension_tmp.png", fileTypeIcons.torrent = "file_extension_torrent.png", fileTypeIcons.ttf = "file_extension_ttf.png", fileTypeIcons.txt = "file_extension_txt.png", fileTypeIcons.vcd = "file_extension_vcd.png", fileTypeIcons.vob = "file_extension_vob.png", fileTypeIcons.wav = "file_extension_wav.png", fileTypeIcons.wma = "file_extension_wma.png", fileTypeIcons.wmv = "file_extension_wmv.png", fileTypeIcons.wps = "file_extension_wps.png", fileTypeIcons.xls = "file_extension_xls.png", fileTypeIcons.xpi = "file_extension_xpi.png", fileTypeIcons.zip = "file_extension_zip.png"; var FileTypes = new Array; function RoxyUtils() { } function RoxyFilemanConf() { } function RoxyLang() { } function t(e) { var t = e; return RoxyLang && RoxyLang[e] && (t = RoxyLang[e]), t } function File(e, i, n, a, l) { this.fullPath = e, this.type = RoxyUtils.GetFileType(e), this.name = RoxyUtils.GetFilename(e), this.ext = RoxyUtils.GetFileExt(e), this.path = RoxyUtils.GetPath(e), this.icon = RoxyUtils.GetFileIcon(e), this.bigIcon = this.icon.replace("filetypes", "filetypes/big"), this.image = e, this.size = i || RoxyUtils.GetFileSize(e), this.time = n, this.width = a || 0, this.height = l || 0, this.Show = function () { html = '<li data-path="' + this.fullPath + '" data-time="' + this.time + '" data-icon="' + this.icon + '" data-w="' + this.width + '" data-h="' + this.height + '" data-size="' + this.size + '" data-icon-big="' + (this.IsImage() ? this.fullPath : this.bigIcon) + '" title="' + this.name + '">', html += '<img src="' + this.icon + '" class="icon">', html += '<span class="time">' + RoxyUtils.FormatDate(new Date(1e3 * this.time)) + "</span>", html += '<span class="name">' + this.name + "</span>", html += '<span class="size">' + RoxyUtils.FormatFileSize(this.size) + "</span>", html += "</li>", $("#pnlFileList").append(html); var e = $("#pnlFileList li:last"); RoxyFilemanConf.MOVEFILE && e.draggable({ helper: makeDragFile, start: startDragFile, cursorAt: { left: 10, top: 10 }, delay: 200 }), e.click(function (e) { selectFile(this) }), e.dblclick(function (e) { selectFile(this), setFile() }), e.tooltip({ show: { delay: 700 }, track: !0, content: tooltipContent }), e.bind("contextmenu", function (e) { e.stopPropagation(), e.preventDefault(), closeMenus("dir"), selectFile(this), $(this).tooltip("close"); var t = e.pageY - $("#menuFile").height(); return t < 0 && (t = 0), $("#menuFile").css({ top: t + "px", left: e.pageX + "px" }).show(), !1 }) }, this.GetElement = function () { return $('li[data-path="' + this.fullPath + '"]') }, this.IsImage = function () { var e = !1; return "image" == this.type && (e = !0), e }, this.Delete = function () { if (RoxyFilemanConf.DELETEFILE) { var e = RoxyUtils.AddParam(RoxyFilemanConf.DELETEFILE, "f", this.fullPath), i = this; $.ajax({ url: e, type: "POST", data: { f: this.fullPath }, dataType: "json", async: !1, success: function (e) { if ("ok" == e.res.toLowerCase()) { $('li[data-path="' + i.fullPath + '"]').remove(); var t = Directory.Parse(i.path); t && (t.files--, t.Update(), t.SetStatusBar()) } else alert(e.msg) }, error: function (i) { alert(t("E_LoadingAjax") + " " + e) } }) } else alert(t("E_ActionDisabled")) }, this.Rename = function (e) { if (!RoxyFilemanConf.RENAMEFILE) return alert(t("E_ActionDisabled")), !1; if (!e) return !1; var i = RoxyUtils.AddParam(RoxyFilemanConf.RENAMEFILE, "f", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = this, a = !1; return $.ajax({ url: i, type: "POST", data: { f: this.fullPath, n: e }, dataType: "json", async: !1, success: function (t) { if ("ok" == t.res.toLowerCase()) { var i = RoxyUtils.MakePath(this.path, e); $('li[data-path="' + n.fullPath + '"] .icon').attr("src", RoxyUtils.GetFileIcon(e)), $('li[data-path="' + n.fullPath + '"] .name').text(e), $('li[data-path="' + i + '"]').attr("data-path", i), a = !0 } t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + i) } }), a }, this.Copy = function (e) { if (RoxyFilemanConf.COPYFILE) { var i = RoxyUtils.AddParam(RoxyFilemanConf.COPYFILE, "f", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = !1; return $.ajax({ url: i, type: "POST", data: { f: this.fullPath, n: e }, dataType: "json", async: !1, success: function (t) { if ("ok" == t.res.toLowerCase()) { var i = Directory.Parse(e); i && (i.files++, i.Update(), i.SetStatusBar(), i.ListFiles(!0)), n = !0 } t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + i) } }), n } alert(t("E_ActionDisabled")) }, this.Move = function (e) { if (RoxyFilemanConf.MOVEFILE) { newFullPath = RoxyUtils.MakePath(e, this.name); var i = RoxyUtils.AddParam(RoxyFilemanConf.MOVEFILE, "f", this.fullPath); i = RoxyUtils.AddParam(i, "n", newFullPath); var n = this, a = !1; return $.ajax({ url: i, type: "POST", data: { f: this.fullPath, n: newFullPath }, dataType: "json", async: !1, success: function (t) { if ("ok" == t.res.toLowerCase()) { $('li[data-path="' + n.fullPath + '"]').remove(); var i = Directory.Parse(n.path); i && (i.files--, i.Update(), i.SetStatusBar(), (i = Directory.Parse(e)).files++, i.Update()), a = !0 } t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + i) } }), a } alert(t("E_ActionDisabled")) } } function Directory(e, n, a) { e || (e = ""), this.fullPath = e, this.name = RoxyUtils.GetFilename(e), this.name || (this.name = "My files"), this.path = RoxyUtils.GetPath(e), this.dirs = n || 0, this.files = a || 0, this.filesList = new Array, this.Show = function () { var e = this.GetHtml(), t = null; 0 == (t = $('li[data-path="' + this.path + '"]')).length ? t = $("#pnlDirList") : (0 == t.children("ul").length && t.append("<ul></ul>"), t = t.children("ul")), t && (t.append(e), this.SetEvents()) }, this.SetEvents = function () { var e = this.GetElement(); RoxyFilemanConf.MOVEDIR && e.draggable({ helper: makeDragDir, start: startDragDir, cursorAt: { left: 10, top: 10 }, delay: 200 }), (e = e.children("div")).click(function (e) { selectDir(this) }), e.bind("contextmenu", function (e) { e.stopPropagation(), e.preventDefault(), closeMenus("file"), selectDir(this); var t = e.pageY - $("#menuDir").height(); return t < 0 && (t = 0), $("#menuDir").css({ top: t + "px", left: e.pageX + "px" }).show(), !1 }), e.droppable({ drop: moveObject, over: dragFileOver, out: dragFileOut }), (e = e.children(".dirPlus")).click(function (e) { e.stopPropagation(), Directory.Parse($(this).closest("li").attr("data-path")).Expand() }) }, this.GetHtml = function () { var e = '<li data-path="' + this.fullPath + '" data-dirs="' + this.dirs + '" data-files="' + this.files + '" class="directory">'; return e += '<div><img src="images/' + (this.dirs > 0 ? "dir-plus.png" : "blank.gif") + '" class="dirPlus" width="9" height="9">', e += '<img src="images/folder.png" class="dir"><span class="name">' + this.name + " (" + this.files + ")</span></div>", e += "</li>" }, this.SetStatusBar = function () { $("#pnlStatus").html(this.files + " " + (1 == this.files ? t("file") : t("files"))) }, this.SetSelectedFile = function (e) { if (e) { var t = File.Parse(e); t && selectFile(t.GetElement()) } }, this.Select = function (e) { var t = this.GetElement(); t.children("div").addClass("selected"), $('#pnlDirList li[data-path!="' + this.fullPath + '"] > div').removeClass("selected"), t.children("img.dir").prop("src", "images/folder.png"), this.SetStatusBar(); for (var i = this.GetParent(); i;)i.Expand(!0), i = i.GetParent(); this.Expand(!0), this.ListFiles(!0, e), setLastDir(this.fullPath) }, this.GetElement = function () { return $('li[data-path="' + this.fullPath + '"]') }, this.IsExpanded = function () { var e = this.GetElement().children("ul"); return e && e.is(":visible") }, this.IsListed = function () { return $("#hdDir").val() == this.fullPath }, this.GetExpanded = function (e) { var t = new Array; return e || (e = $("#pnlDirList")), e.children("li").each(function () { var e = $(this).attr("data-path"), i = new Directory(e); i && (i.IsExpanded() && e && t.push(e), t = t.concat(i.GetExpanded(i.GetElement().children("ul")))) }), t }, this.RestoreExpanded = function (e) { for (i = 0; i < e.length; i++) { var t = Directory.Parse(e[i]); t && t.Expand(!0) } }, this.GetParent = function () { return Directory.Parse(this.path) }, this.SetOpened = function () { var e = this.GetElement(); e.find("li").length < 1 ? e.children("div").children(".dirPlus").prop("src", "images/blank.gif") : this.IsExpanded() ? e.children("div").children(".dirPlus").prop("src", "images/dir-minus.png") : e.children("div").children(".dirPlus").prop("src", "images/dir-plus.png") }, this.Update = function (e) { var t = this.GetElement(); e && (this.fullPath = e, this.name = RoxyUtils.GetFilename(e), this.name || (this.name = "My files"), this.path = RoxyUtils.GetPath(e)), t.attr("data-path", this.fullPath), t.attr("data-dirs", this.dirs), t.attr("data-files", this.files), t.children("div").children(".name").html(this.name + " (" + this.files + ")"), this.SetOpened() }, this.LoadAll = function (e) { var n = this.GetExpanded(), a = RoxyFilemanConf.DIRLIST; if (a) { $("#pnlLoadingDirs").show(), $("#pnlDirList").hide(), a = RoxyUtils.AddParam(a, "type", RoxyUtils.GetUrlParam("type")); var l = this; $.ajax({ url: a, type: "POST", dataType: "json", async: !1, cache: !1, success: function (t) { for ($("#pnlDirList").children("li").remove(), i = 0; i < t.length; i++) { (a = new Directory(t[i].p, t[i].d, t[i].f)).Show() } var a; $("#pnlLoadingDirs").hide(), $("#pnlDirList").show(), l.RestoreExpanded(n), (a = Directory.Parse(e)) && a.Select() }, error: function (e) { $("#pnlLoadingDirs").hide(), $("#pnlDirList").show(), alert(t("E_LoadingAjax") + " " + RoxyFilemanConf.DIRLIST) } }) } else alert(t("E_ActionDisabled")) }, this.Expand = function (e) { var t = this.GetElement().children("ul"); this.IsExpanded() && !e ? t.hide() : t.show(), this.SetOpened() }, this.Create = function (e) { if (!e) return !1; if (RoxyFilemanConf.CREATEDIR) { var i = RoxyUtils.AddParam(RoxyFilemanConf.CREATEDIR, "d", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = this, a = !1; return $.ajax({ url: i, type: "POST", data: { d: this.fullPath, n: e }, dataType: "json", async: !1, cache: !1, success: function (t) { "ok" == t.res.toLowerCase() ? (n.LoadAll(RoxyUtils.MakePath(n.fullPath, e)), a = !0) : alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + n.name) } }), a } alert(t("E_ActionDisabled")) }, this.Delete = function () { if (RoxyFilemanConf.DELETEDIR) { var e = RoxyUtils.AddParam(RoxyFilemanConf.DELETEDIR, "d", this.fullPath), i = this, n = !1; return $.ajax({ url: e, type: "POST", data: { d: this.fullPath }, dataType: "json", async: !1, cache: !1, success: function (e) { if ("ok" == e.res.toLowerCase()) { var t = i.GetParent(); t.dirs--, t.Update(), t.Select(), i.GetElement().remove(), n = !0 } e.msg && alert(e.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + i.name) } }), n } alert(t("E_ActionDisabled")) }, this.Rename = function (e) { if (!e) return !1; if (RoxyFilemanConf.RENAMEDIR) { var i = RoxyUtils.AddParam(RoxyFilemanConf.RENAMEDIR, "d", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = this, a = !1; return $.ajax({ url: i, type: "POST", data: { d: this.fullPath, n: e }, dataType: "json", async: !1, cache: !1, success: function (t) { if ("ok" == t.res.toLowerCase()) { var i = RoxyUtils.MakePath(n.path, e); n.Update(i), n.Select(), a = !0 } t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + n.name) } }), a } alert(t("E_ActionDisabled")) }, this.Copy = function (e) { if (RoxyFilemanConf.COPYDIR) { var i = RoxyUtils.AddParam(RoxyFilemanConf.COPYDIR, "d", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = !1; return $.ajax({ url: i, type: "POST", data: { d: this.fullPath, n: e }, dataType: "json", async: !1, cache: !1, success: function (t) { if ("ok" == t.res.toLowerCase()) { var i = Directory.Parse(e); i && i.LoadAll(i.fullPath), n = !0 } t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + i) } }), n } alert(t("E_ActionDisabled")) }, this.Move = function (e) { if (!e) return !1; if (RoxyFilemanConf.MOVEDIR) { var i = RoxyUtils.AddParam(RoxyFilemanConf.MOVEDIR, "d", this.fullPath); i = RoxyUtils.AddParam(i, "n", e); var n = this, a = !1; return $.ajax({ url: i, type: "POST", data: { d: this.fullPath, n: e }, dataType: "json", async: !1, cache: !1, success: function (t) { "ok" == t.res.toLowerCase() && (n.LoadAll(RoxyUtils.MakePath(e, n.name)), a = !0), t.msg && alert(t.msg) }, error: function (e) { alert(t("E_LoadingAjax") + " " + n.name) } }), a } alert(t("E_ActionDisabled")) }, this.ListFiles = function (e, t) { $("#pnlLoading").show(), $("#pnlEmptyDir").hide(), $("#pnlFileList").hide(), $("#pnlSearchNoFiles").hide(), this.LoadFiles(e, t) }, this.FilesLoaded = function (e, t) { for (e = this.SortFiles(e), $("#pnlFileList").html(""), i = 0; i < e.length; i++) { e[i].Show() } $("#hdDir").val(this.fullPath), $("#pnlLoading").hide(), 0 == $("#pnlFileList").children("li").length && $("#pnlEmptyDir").show(), this.files = $("#pnlFileList").children("li").length, this.Update(), this.SetStatusBar(), filterFiles(), switchView(), $("#pnlFileList").show(), this.SetSelectedFile(t) }, this.LoadFiles = function (e, n) { if (RoxyFilemanConf.FILESLIST) { var a = new Array, l = RoxyFilemanConf.FILESLIST; l = RoxyUtils.AddParam(l, "d", this.fullPath), l = RoxyUtils.AddParam(l, "type", RoxyUtils.GetUrlParam("type")); var o = this; return !this.IsListed() || e ? $.ajax({ url: l, type: "POST", data: { d: this.fullPath, type: RoxyUtils.GetUrlParam("type") }, dataType: "json", async: !0, cache: !1, success: function (e) { for (i = 0; i < e.length; i++)a.push(new File(e[i].p, e[i].s, e[i].t, e[i].w, e[i].h)); o.FilesLoaded(a, n) }, error: function (e) { alert(t("E_LoadingAjax") + " " + l) } }) : ($("#pnlFileList li").each(function () { a.push(new File($(this).attr("data-path"), $(this).attr("data-size"), $(this).attr("data-time"), $(this).attr("data-w"), $(this).attr("data-h"))) }), o.FilesLoaded(a, n)), a } alert(t("E_ActionDisabled")) }, this.SortByName = function (e, t) { return e.sort(function (e, i) { var n = "desc" == t ? 0 : 2; return (e = e.name.toLowerCase()) > (i = i.name.toLowerCase()) ? -1 + n : e < i ? 1 - n : 0 }), e }, this.SortBySize = function (e, t) { return e.sort(function (e, i) { var n = "desc" == t ? 0 : 2; return (e = parseInt(e.size)) > (i = parseInt(i.size)) ? -1 + n : e < i ? 1 - n : 0 }), e }, this.SortByTime = function (e, t) { return e.sort(function (e, i) { var n = "desc" == t ? 0 : 2; return (e = parseInt(e.time)) > (i = parseInt(i.time)) ? -1 + n : e < i ? 1 - n : 0 }), e }, this.SortFiles = function (e) { var t = $("#ddlOrder").val(); switch (t || (t = "name"), t) { case "size": e = this.SortBySize(e, "asc"); break; case "size_desc": e = this.SortBySize(e, "desc"); break; case "time": e = this.SortByTime(e, "asc"); break; case "time_desc": e = this.SortByTime(e, "desc"); break; case "name_desc": e = this.SortByName(e, "desc"); break; default: e = this.SortByName(e, "asc") }return e } } function selectFile(e) { $("#pnlFileList li").removeClass("selected"), $(e).prop("class", "selected"); var i = RoxyUtils.GetFilename($(e).attr("data-path")); i += " (" + t("Size") + ": " + RoxyUtils.FormatFileSize($(e).attr("data-size")), $(e).attr("data-w") > 0 && (i += ", " + t("Dimensions") + ":" + $(e).attr("data-w") + "x" + $(e).attr("data-h")), i += ")", $("#pnlStatus").html(i) } function getLastDir() { return RoxyUtils.GetCookie("roxyld") } function setLastDir(e) { RoxyUtils.SetCookie("roxyld", e, 10) } function selectDir(e) { var t = Directory.Parse($(e).parent("li").attr("data-path")); t && t.Select() } function startDragDir() { } function startDragFile() { selectFile(this) } function dragFileOver() { $(this).children("img.dir").attr("src", "images/folder-green.png") } function dragFileOut() { $("#pnlDirList").find("img.dir").attr("src", "images/folder.png") } function makeDragFile(e) { var t = new File($(e.target).closest("li").attr("data-path")); return '<div class="pnlDragFile" data-path="' + t.fullPath + '"><img src="' + t.bigIcon + '" align="absmiddle">&nbsp;' + t.name + "</div>" } function makeDragDir(e) { var t = new Directory($(e.target).attr("data-path") ? $(e.target).attr("data-path") : $(e.target).closest("li").attr("data-path")); return '<div class="pnlDragDir" data-path="' + t.fullPath + '"><img src="images/folder.png" align="absmiddle">&nbsp;' + t.name + "</div>" } function moveDir(e, t, i) { var n = Directory.Parse(t.draggable.attr("data-path")), a = Directory.Parse($(i).parent("li").attr("data-path")); a.fullPath != n.path && n.Move(a.fullPath) } function moveFile(e, t, i) { var n = new File(t.draggable.attr("data-path")), a = Directory.Parse($(i).parent("li").attr("data-path")); Directory.Parse(n.path); n.path != a.fullPath && n.Move(a.fullPath) } function moveObject(e, t) { e.stopPropagation(), t.draggable.hasClass("directory") ? moveDir(e, t, this) : moveFile(e, t, this), dragFileOut() } function clickFirstOnEnter(e) { $("#" + e).unbind("keypress"), $(".actions input").each(function () { this.blur() }), $("#" + e).keypress(function (e) { e.keyCode == $.ui.keyCode.ENTER && (e.stopPropagation(), $(this).parent().find(".ui-dialog-buttonset button").eq(0).trigger("click")) }) } function addDir() { var e = getSelectedDir(); if (e) { clickFirstOnEnter("pnlDirName"), $("#txtDirName").val(""); var i = {}; i[t("CreateDir")] = function () { var i = $.trim($("#txtDirName").val()); i || alert(t("E_MissingDirName")), e.Create(i) && $("#pnlDirName").dialog("close") }, i[t("Cancel")] = function () { $("#pnlDirName").dialog("close") }, $("#pnlDirName").dialog({ title: t("T_CreateDir"), modal: !0, buttons: i }) } } FileTypes.image = new Array("jpg", "jpeg", "png", "gif"), FileTypes.media = new Array("avi", "flv", "swf", "wmv", "mp3", "wma", "mpg", "mpeg"), FileTypes.document = new Array("doc", "docx", "txt", "rtf", "pdf", "xls", "mdb", "html", "htm", "db"), RoxyUtils.FixPath = function (e) { if (!e) return ""; var t = e.replace(/\\/g, ""); return t = (t = t.replace(/\/\//g, "/")).replace(":/", "://") }, RoxyUtils.FormatDate = function (e) { var t = ""; try { t = $.format.date(e, RoxyFilemanConf.DATEFORMAT) } catch (i) { t = (t = e.toString()).substr(0, t.indexOf("UTC")) } return t }, RoxyUtils.GetPath = function (e) { var t = ""; return (e = RoxyUtils.FixPath(e)).indexOf("/") > -1 && (t = e.substring(0, e.lastIndexOf("/"))), t }, RoxyUtils.GetUrlParam = function (e, t) { var n = ""; if (t || (t = self.location.href), t.indexOf("?") > -1) for (t = (t = t.substr(t.indexOf("?") + 1)).split("&"), i = 0; i < t.length; i++) { var a = t[i].split("="); if (a[0] && a[1] && a[0] == e) { n = a[1]; break } } return n }, RoxyUtils.GetFilename = function (e) { var t = e; return (e = RoxyUtils.FixPath(e)).indexOf("/") > -1 && (t = e.substring(e.lastIndexOf("/") + 1)), t }, RoxyUtils.MakePath = function () { if (ret = "", arguments && arguments.length > 0) { for (var e = 0; e < arguments.length; e++)ret += $.isArray(arguments[e]) ? arguments[e].join("/") : arguments[e], e < arguments.length - 1 && (ret += "/"); ret = RoxyUtils.FixPath(ret) } return ret }, RoxyUtils.GetFileExt = function (e) { var t = ""; return (e = RoxyUtils.GetFilename(e)).indexOf(".") > -1 && (t = e.substring(e.lastIndexOf(".") + 1)), t }, RoxyUtils.FileExists = function (e) { var t = !1; return $.ajax({ url: e, type: "HEAD", async: !1, dataType: "text", success: function () { t = !0 } }), t }, RoxyUtils.GetFileIcon = function (e) { return ret = "images/filetypes/unknown.png", fileTypeIcons[RoxyUtils.GetFileExt(e).toLowerCase()] && (ret = "images/filetypes/" + fileTypeIcons[RoxyUtils.GetFileExt(e).toLowerCase()]), ret }, RoxyUtils.GetFileSize = function (e) { var t = 0; return $.ajax({ url: e, type: "HEAD", async: !1, success: function (e, i, n) { t = n.getResponseHeader("Content-Length") } }), t || (t = 0), t }, RoxyUtils.GetFileType = function (e) { var t = RoxyUtils.GetFileExt(e).toLowerCase(); return "png" != t && "jpg" != t && "gif" != t && "jpeg" != t || (t = "image"), t }, RoxyUtils.IsImage = function (e) { var t = !1; return "image" == RoxyUtils.GetFileType(e) && (t = !0), t }, RoxyUtils.FormatFileSize = function (e) { var t = "B"; return e || (e = 0), e > 1024 && (e /= 1024, t = "KB"), e > 1024 && (e /= 1024, t = "MB"), (e = new Number(e)).toFixed(2) + " " + t }, RoxyUtils.AddParam = function (e, t, i) { return e += (e.indexOf("?") > -1 ? "&" : "?") + t + "=" + encodeURIComponent(i) }, RoxyUtils.SelectText = function (e, t, i) { try { var n = document.getElementById(e); if (n.createTextRange) { var a = n.createTextRange(); a.collapse(!0), a.moveStart("character", t), a.moveEnd("character", i - t), a.select() } else n.setSelectionRange ? n.setSelectionRange(t, i) : n.selectionStart && (n.selectionStart = t, n.selectionEnd = i); n.focus() } catch (e) { } }, RoxyUtils.LoadConfig = function () { $.ajax({ url: "conf.json", dataType: "json", async: !1, success: function (e) { RoxyFilemanConf = e }, error: function (e) { alert(t("E_LoadingConf")) } }) }, RoxyUtils.LoadLang = function () { var e = ""; if (RoxyFilemanConf.LANG && "auto" == RoxyFilemanConf.LANG.toLowerCase()) { if (RoxyUtils.GetUrlParam("langCode")) e = "lang/" + RoxyUtils.GetUrlParam("langCode").substr(0, 2).toLowerCase() + ".json"; else e = "lang/" + (window.navigator.userLanguage || window.navigator.language).substr(0, 2) + ".json"; RoxyUtils.FileExists(e) || (e = "") } else RoxyFilemanConf.LANG && (e = "lang/" + RoxyFilemanConf.LANG.substr(0, 2).toLowerCase() + ".json", RoxyUtils.FileExists(e) || (e = "")); e || (e = "lang/en.json"), $.ajax({ url: e, dataType: "json", async: !1, success: function (e) { RoxyLang = e }, error: function (e) { alert("Error loading language file") } }) }, RoxyUtils.Translate = function () { RoxyUtils.LoadLang(), $("[data-lang-t]").each(function () { var e = $(this).attr("data-lang-t"); $(this).prop("title", t(e)) }), $("[data-lang-v]").each(function () { var e = $(this).attr("data-lang-v"); $(this).prop("value", t(e)) }), $("[data-lang]").each(function () { var e = $(this).attr("data-lang"); $(this).html(t(e)) }) }, RoxyUtils.GetCookies = function () { var e = new Object, t = document.cookie.replace(" ", ""); for (i in t = t.split(";")) { var n = t[i].split("="); n.length > 1 && (e[$.trim(n[0].toString())] = decodeURIComponent($.trim(n[1].toString())) || "") } return e }, RoxyUtils.GetCookie = function (e) { return RoxyUtils.GetCookies()[e] || "" }, RoxyUtils.SetCookie = function (e, t, i, n) { var a = new Date; i && a.setTime(a.getTime() + 3600 * i * 1e3), n || (n = "/"), document.cookie = e + "=" + encodeURIComponent(t) + "; path=" + n + (i ? "; expires=" + a.toGMTString() : "") }, RoxyUtils.ToBool = function (e) { var t = !1; return "true" != (e = e.toString().toLowerCase()) && "on" != e && "yes" != e && "1" != e || (t = !0), t }, RoxyUtils.UnsetCookie = function (e) { document.cookie = e + "=; expires=Thu, 01 Jan 1972 00:00:00 UTC" }, File.Parse = function (e) { var t = !1, i = $("#pnlFileList").find('li[data-path="' + e + '"]'); return i.length > 0 && (t = new File(i.attr("data-path"), i.attr("data-size"), i.attr("data-time"), i.attr("data-w"), i.attr("data-h"))), t }, Directory.Parse = function (e) { var t = !1, i = $("#pnlDirList").find('li[data-path="' + e + '"]'); return i.length > 0 && (t = new Directory(i.attr("data-path"), i.attr("data-dirs"), i.attr("data-files"))), t }, $.ajaxSetup({ cache: !1 }); var uploadFileList = new Array; function showUploadList(e) { var t = $("#uploadFilesList"); for (t.html(""), clearFileField(), i = 0; i < e.length; i++)t.append('<div class="fileUpload"><div class="fileName">' + e[i].name + " (" + RoxyUtils.FormatFileSize(e[i].size) + ')<span class="progressPercent"></span><div class="uploadProgress"><div class="stripes"></div></div></div><a class="removeUpload" onclick="removeUpload(' + i + ')"></a></div>'); e.length > 0 ? $("#btnUpload").button("enable") : $("#btnUpload").button("disable") } function listUploadFiles(e) { window.FileList ? e.length > 0 && (uploadFileList = new Array, addUploadFiles(e)) : $("#btnUpload").button("enable") } function addUploadFiles(e) { for (i = 0; i < e.length; i++)uploadFileList.push(e[i]); showUploadList(uploadFileList) } function removeUpload(e) { findUploadElement(e).remove(); try { uploadFileList.splice(e, 1), showUploadList(uploadFileList) } catch (e) { } } function findUploadElement(e) { return $("#uploadFilesList .fileUpload:eq(" + e + ")") } function updateUploadProgress(e, t) { var i = findUploadElement(t), n = 99; e.lengthComputable && (n = Math.floor(e.loaded / e.total * 100)), n > 99 && (n = 99), i.find(".uploadProgress").css("width", n + "%"), i.find(".progressPercent").html(" - " + n + "%") } function uploadComplete(e, t) { uploadFinished(e, t, "ok") } function uploadError(e, t) { setUploadError(t), uploadFinished(e, t, "error") } function setUploadError(e) { var i = findUploadElement(e); i.find(".uploadProgress").css("width", "100%").addClass("uploadError").removeClass("uploadComplete"), i.find(".progressPercent").html(' - <span class="error">' + t("E_UploadingFile") + "</span>") } function setUploadSuccess(e) { var t = findUploadElement(e); t.find(".uploadProgress").css("width", "100%").removeClass("uploadError").addClass("uploadComplete"), t.find(".progressPercent").html(" - 100%") } function uploadCanceled(e, t) { uploadFinished(e, t, "error") } function uploadFinished(e, t, i) { var n = findUploadElement(t), a = null; try { a = JSON.parse(e.target.responseText) } catch (e) { } a && "error" == a.res || "ok" != i ? (i = "error", setUploadError(t)) : (i = "ok", setUploadSuccess(t)), n.attr("data-ulpoad", i), checkUploadResult() } function checkUploadResult() { var e = $("#uploadFilesList .fileUpload").length, t = $("#uploadFilesList .fileUpload[data-ulpoad]").length; $('#uploadFilesList .fileUpload[data-ulpoad="ok"]').length; t == e && (uploadFileList = new Array, Directory.Parse($("#hdDir").val()).ListFiles(!0), $("#btnUpload").button("disable")) } function fileUpload(e, t) { var i = new XMLHttpRequest, n = new FormData; findUploadElement(t).find(".removeUpload").remove(), n.append("action", "upload"), n.append("method", "ajax"), n.append("d", $("#hdDir").attr("value")), n.append("files[]", e), i.upload.addEventListener("progress", function (e) { updateUploadProgress(e, t) }, !1), i.addEventListener("load", function (e) { uploadComplete(e, t) }, !1), i.addEventListener("error", function (e) { uploadError(e, t) }, !1), i.addEventListener("abort", function (e) { uploadCanceled(e, t) }, !1), i.open("POST", RoxyFilemanConf.UPLOAD, !0), i.setRequestHeader("Accept", "*/*"), i.send(n) } function dropFiles(e, t) { e && e.dataTransfer && e.dataTransfer.files ? (addFile(), t ? addUploadFiles(e.dataTransfer.files) : listUploadFiles(e.dataTransfer.files)) : addFile() } function clearFileField(e) { e || (e = "#fileUploads"); try { $(e).val(""), $(e).val(null) } catch (e) { } } function addFileClick() { $("#uploadResult").html(""), showUploadList(new Array), addFile() } function addFile() { clickFirstOnEnter("dlgAddFile"), $("#uploadResult").html(""), clearFileField(); var e = {}; e[t("Upload")] = { id: "btnUpload", text: t("Upload"), disabled: !0, click: function () { if ($("#fileUploads").val() || uploadFileList && 0 != uploadFileList.length) if (RoxyFilemanConf.UPLOAD) if (window.FormData && window.XMLHttpRequest && window.FileList && uploadFileList && uploadFileList.length > 0) for (i = 0; i < uploadFileList.length; i++)fileUpload(uploadFileList[i], i); else document.forms.addfile.action = RoxyFilemanConf.UPLOAD, document.forms.addfile.submit(); else alert(t("E_ActionDisabled")); else alert(t("E_SelectFiles")) } }, e[t("Cancel")] = function () { $("#dlgAddFile").dialog("close") }, $("#dlgAddFile").dialog({ title: t("T_AddFile"), modal: !0, buttons: e, width: 400 }) } function fileUploaded(e) { "ok" == e.res && e.msg ? ($("#dlgAddFile").dialog("close"), Directory.Parse($("#hdDir").val()).ListFiles(!0), alert(e.msg)) : "ok" == e.res ? ($("#dlgAddFile").dialog("close"), Directory.Parse($("#hdDir").val()).ListFiles(!0)) : alert(e.msg) } function renameDir() { var e = getSelectedDir(); if (e) if ($('[data-path="' + e.fullPath + '"]').parents("li").length < 1) alert(t("E_CannotRenameRoot")); else { clickFirstOnEnter("pnlDirName"), $("#txtDirName").val(e.name); var i = {}; i[t("RenameDir")] = function () { var i = $.trim($("#txtDirName").val()); i || alert(t("E_MissingDirName")), e.Rename(i) && $("#pnlDirName").dialog("close") }, i[t("Cancel")] = function () { $("#pnlDirName").dialog("close") }, $("#pnlDirName").dialog({ title: t("T_RenameDir"), modal: !0, buttons: i }), RoxyUtils.SelectText("txtDirName", 0, new String(e.name).length) } } function renameFile() { var e = getSelectedFile(); if (e) { clickFirstOnEnter("pnlRenameFile"), $("#txtFileName").val(e.name); var i = {}; i[t("RenameFile")] = function () { var t = $.trim($("#txtFileName").val()); t ? e.Rename(t) && ($('li[data-path="' + e.fullPath + '"] .name').text(t), $('li[data-path="' + e.fullPath + '"]').attr("data-path", RoxyUtils.MakePath(e.path, t)), $("#pnlRenameFile").dialog("close")) : alert("Missing file name") }, i[t("Cancel")] = function () { $("#pnlRenameFile").dialog("close") }, $("#pnlRenameFile").dialog({ title: t("T_RenameFile"), modal: !0, buttons: i }), e.name.lastIndexOf(".") > 0 && RoxyUtils.SelectText("txtFileName", 0, e.name.lastIndexOf(".")) } } function getSelectedFile() { var e = null; return $("#pnlFileList .selected").length > 0 && (e = new File($("#pnlFileList .selected").attr("data-path"))), e } function getSelectedDir() { var e = null; return $("#pnlDirList .selected") && (e = Directory.Parse($("#pnlDirList .selected").closest("li").attr("data-path"))), e } function deleteDir(e) { var i = null; (i = e ? Directory.Parse(e) : getSelectedDir()) && confirm(t("Q_DeleteFolder")) && i.Delete() } function deleteFile() { var e = getSelectedFile(); e && confirm(t("Q_DeleteFile")) && e.Delete() } function previewFile() { var e = getSelectedFile(); e && window.open(e.fullPath) } function downloadFile() { var e = getSelectedFile(); if (e && RoxyFilemanConf.DOWNLOAD) { var i = RoxyUtils.AddParam(RoxyFilemanConf.DOWNLOAD, "f", e.fullPath); window.frames.frmUploadFile.location.href = i } else RoxyFilemanConf.DOWNLOAD || alert(t("E_ActionDisabled")) } function downloadDir() { var e = getSelectedDir(); if (e && RoxyFilemanConf.DOWNLOADDIR) { var i = RoxyUtils.AddParam(RoxyFilemanConf.DOWNLOADDIR, "d", e.fullPath); window.frames.frmUploadFile.location.href = i } else RoxyFilemanConf.DOWNLOAD || alert(t("E_ActionDisabled")) } function closeMenus(e) { e && "dir" != e || $("#menuDir").fadeOut(), e && "file" != e || $("#menuFile").fadeOut() } function selectFirst() { var e = $("#pnlDirList li:first").children("div").first(); e.length > 0 ? selectDir(e) : window.setTimeout("selectFirst()", 300) } function tooltipContent() { if ($("#menuFile").is(":visible")) return ""; var e = "", i = File.Parse($(this).attr("data-path")); return "thumb" == $("#hdViewType").val() && i.IsImage() ? e = i.fullPath + '<br><span class="filesize">' + t("Size") + ": " + RoxyUtils.FormatFileSize(i.size) + " " + t("Dimensions") + ": " + i.width + "x" + i.height + "</span>" : i.IsImage() ? (RoxyFilemanConf.GENERATETHUMB ? (imgUrl = RoxyUtils.AddParam(RoxyFilemanConf.GENERATETHUMB, "f", i.fullPath), imgUrl = RoxyUtils.AddParam(imgUrl, "width", RoxyFilemanConf.PREVIEW_THUMB_WIDTH), imgUrl = RoxyUtils.AddParam(imgUrl, "height", RoxyFilemanConf.PREVIEW_THUMB_HEIGHT)) : imgUrl = i.fullPath, e = '<img src="' + imgUrl + '" class="imgPreview"><br>' + i.name + ' <br><span class="filesize">' + t("Size") + ": " + RoxyUtils.FormatFileSize(i.size) + " " + t("Dimensions") + ": " + i.width + "x" + i.height + "</span>") : e = i.fullPath + ' <span class="filesize">' + t("Size") + ": " + RoxyUtils.FormatFileSize(i.size) + "</span>", e } function filterFiles() { var e = $("#txtSearch").val(); if ($("#pnlSearchNoFiles").hide(), 0 != $("#pnlFileList li").length) if (e) { var t = 0; $("#pnlFileList li").each(function () { $(this).children(".name").text().toLowerCase().indexOf(e.toLowerCase()) > -1 ? (t++, $(this).show()) : ($(this).removeClass("selected"), $(this).hide()) }), 0 == t && $("#pnlSearchNoFiles").show() } else $("#pnlFileList li").show() } function sortFiles() { var e = getSelectedDir(); e && (e.ListFiles(), filterFiles(), switchView($("#hdViewType").val())) } function switchView(e) { if (e != $("#hdViewType").val()) { if (e || (e = $("#hdViewType").val()), $(".btnView").removeClass("selected"), "thumb" == e) { if ($("#pnlFileList .icon").attr("src", "images/blank.gif"), $("#pnlFileList").addClass("thumbView"), 0 == $("#dynStyle").length) { $("head").append('<style id="dynStyle" />'); var t = "ul#pnlFileList.thumbView li{width:" + RoxyFilemanConf.THUMBS_VIEW_WIDTH + "px;}"; t += "ul#pnlFileList.thumbView li{height:" + (parseInt(RoxyFilemanConf.THUMBS_VIEW_HEIGHT) + 20) + "px;}", t += "ul#pnlFileList.thumbView .icon{width:" + RoxyFilemanConf.THUMBS_VIEW_WIDTH + "px;}", t += "ul#pnlFileList.thumbView .icon{height:" + RoxyFilemanConf.THUMBS_VIEW_HEIGHT + "px;}", $("#dynStyle").html(t) } $("#pnlFileList li").each(function () { var e = $(this).attr("data-icon-big"); RoxyFilemanConf.GENERATETHUMB && RoxyUtils.IsImage($(this).attr("data-path")) && (e = RoxyUtils.AddParam(RoxyFilemanConf.GENERATETHUMB, "f", e), e = RoxyUtils.AddParam(e, "width", RoxyFilemanConf.THUMBS_VIEW_WIDTH), e = RoxyUtils.AddParam(e, "height", RoxyFilemanConf.THUMBS_VIEW_HEIGHT)), $(this).children(".icon").css("background-image", "url(" + e + ")"), $(this).tooltip("option", "show", { delay: 50 }) }), $("#btnThumbView").addClass("selected") } else $("#pnlFileList").removeClass("thumbView"), $("#pnlFileList li").each(function () { $(this).children(".icon").css("background-image", "").attr("src", $(this).attr("data-icon")), $(this).tooltip("option", "show", { delay: 500 }) }), $("#btnListView").addClass("selected"); $("#hdViewType").val(e), RoxyUtils.SetCookie("roxyview", e, 10) } } var clipBoard = null; function Clipboard(e, t) { this.action = e, this.obj = t } function cutDir() { var e = getSelectedDir(); e && (setClipboard("cut", e), e.GetElement().addClass("pale")) } function copyDir() { var e = getSelectedDir(); e && setClipboard("copy", e) } function cutFile() { var e = getSelectedFile(); e && (setClipboard("cut", e), e.GetElement().addClass("pale")) } function copyFile() { var e = getSelectedFile(); e && setClipboard("copy", e) } function pasteToFiles(e, t) { if ($(t).hasClass("pale")) return e.stopPropagation(), !1; var i = getSelectedDir(); return i || (i = Directory.Parse($("#pnlDirList li:first").children("div").first())), i && clipBoard && clipBoard.obj && ("copy" == clipBoard.action ? clipBoard.obj.Copy(i.fullPath) : (clipBoard.obj.Move(i.fullPath), clearClipboard())), !0 } function pasteToDirs(e, t) { if ($(t).hasClass("pale")) return e.stopPropagation(), !1; var i = getSelectedDir(); return i || (i = Directory.Parse($("#pnlDirList li:first").children("div").first())), clipBoard && i ? "copy" == clipBoard.action ? clipBoard.obj.Copy(i.fullPath) : (clipBoard.obj.Move(i.fullPath), clearClipboard(), i.ListFiles(!0)) : alert("error"), !0 } function clearClipboard() { $("#pnlDirList li").removeClass("pale"), $("#pnlFileList li").removeClass("pale"), clipBoard = null, $(".paste").addClass("pale") } function setClipboard(e, t) { clearClipboard(), t && (clipBoard = new Clipboard(e, t), $(".paste").removeClass("pale")) } function ResizeLists() { var e = $(window).innerHeight() - $("#fileActions .actions").outerHeight() - $(".bottomLine").outerHeight(); $(".scrollPane").css("height", e) } function removeDisabledActions() { "" == RoxyFilemanConf.CREATEDIR && ($("#mnuCreateDir").next().remove(), $("#mnuCreateDir").remove(), $("#btnAddDir").remove()), "" == RoxyFilemanConf.DELETEDIR && ($("#mnuDeleteDir").prev().remove(), $("#mnuDeleteDir").remove(), $("#btnDeleteDir").remove()), "" == RoxyFilemanConf.MOVEDIR && ($("#mnuDirCut").next().remove(), $("#mnuDirCut").remove()), "" == RoxyFilemanConf.COPYDIR && ($("#mnuDirCopy").next().remove(), $("#mnuDirCopy").remove()), "" == RoxyFilemanConf.COPYDIR && "" == RoxyFilemanConf.MOVEDIR && ($("#mnuDirPaste").next().remove(), $("#mnuDirPaste").remove()), "" == RoxyFilemanConf.RENAMEDIR && ($("#mnuRenameDir").next().remove(), $("#mnuRenameDir").remove(), $("#btnRenameDir").remove()), "" == RoxyFilemanConf.UPLOAD && $("#btnAddFile").remove(), "" == RoxyFilemanConf.DOWNLOAD && ($("#mnuDownload").next().remove(), $("#mnuDownload").remove()), "" == RoxyFilemanConf.DOWNLOADDIR && ($("#mnuDownloadDir").next().remove(), $("#mnuDownloadDir").remove()), "" == RoxyFilemanConf.DELETEFILE && ($("#mnuDeleteFile").prev().remove(), $("#mnuDeleteFile").remove(), $("#btnDeleteFile").remove()), "" == RoxyFilemanConf.MOVEFILE && ($("#mnuFileCut").next().remove(), $("#mnuFileCut").remove()), "" == RoxyFilemanConf.COPYFILE && ($("#mnuFileCopy").next().remove(), $("#mnuFileCopy").remove()), "" == RoxyFilemanConf.COPYFILE && "" == RoxyFilemanConf.MOVEFILE && ($("#mnuFilePaste").next().remove(), $("#mnuFilePaste").remove()), "" == RoxyFilemanConf.RENAMEFILE && ($("#mnuRenameFile").next().remove(), $("#mnuRenameFile").remove(), $("#btnRenameFile").remove()) } function getPreselectedFile() { var e = RoxyUtils.GetUrlParam("selected"); if (!e) switch (getFilemanIntegration()) { case "ckeditor": try { var t = window.opener.CKEDITOR.dialog.getCurrent(); e = t.getValueOf("info", "link" == t.getName() ? "url" : "txtUrl") } catch (e) { } break; case "tinymce3": try { 0 == (e = tinyMCEPopup.getWindowArg("window").document.getElementById(tinyMCEPopup.getWindowArg("input")).value).indexOf("..") && (e = e.substr(2)) } catch (e) { } break; case "tinymce4": try { 0 == (e = (window.opener ? window.opener : window.parent).document.getElementById(RoxyUtils.GetUrlParam("input")).value).indexOf("..") && (e = e.substr(2)) } catch (e) { } break; default: e = GetSelectedValue() }if (RoxyFilemanConf.RETURN_URL_PREFIX) { var i = RoxyFilemanConf.RETURN_URL_PREFIX; 0 == e.indexOf(i) && ("/" == i.substr(-1) && (i = i.substr(0, i.length - 1)), e = e.substr(i.length)) } return e } function initSelection(e) { var t = !1, i = !0; if (e || (e = getPreselectedFile()), !e && RoxyUtils.ToBool(RoxyFilemanConf.OPEN_LAST_DIR) && (e = getLastDir(), i = !1), e) { var n = i ? RoxyUtils.GetPath(e) : e, a = tmp = Directory.Parse(n); do { tmp && (tmp.Expand(!0), t = !0), tmp = Directory.Parse(tmp.path) } while (tmp); a && (a.Select(e), t = !0) } t || selectFirst() } function getFilemanIntegration() { var e = RoxyUtils.GetUrlParam("integration"); return e || (e = RoxyFilemanConf.INTEGRATION), e.toLowerCase() } function setFile() { var e = getSelectedFile(); if (e) { var i = e.fullPath; if (RoxyFilemanConf.RETURN_URL_PREFIX) { var n = RoxyFilemanConf.RETURN_URL_PREFIX; "/" == n.substr(-1) && (n = n.substr(0, n.length - 1)), i = n + ("/" != i.substr(0, 1) ? "/" : "") + i } switch (getFilemanIntegration()) { case "ckeditor": window.opener.CKEDITOR.tools.callFunction(RoxyUtils.GetUrlParam("CKEditorFuncNum"), i), self.close(); break; case "tinymce3": (a = tinyMCEPopup.getWindowArg("window")).document.getElementById(tinyMCEPopup.getWindowArg("input")).value = i, void 0 !== a.ImageDialog && (a.ImageDialog.getImageData && a.ImageDialog.getImageData(), a.ImageDialog.showPreviewImage && a.ImageDialog.showPreviewImage(i)), tinyMCEPopup.close(); break; case "tinymce4": var a, l = (a = window.opener ? window.opener : window.parent).document.querySelector(".summernote.active"), o = a.document.querySelector(".roxy-modal.active .close"); l.setAttribute("data-name", e.name), l.setAttribute("data-format", e.ext), l.setAttribute("data-file", i), o.click(), void 0 !== a.ImageDialog && (a.ImageDialog.getImageData && a.ImageDialog.getImageData(), a.ImageDialog.showPreviewImage && a.ImageDialog.showPreviewImage(i)); break; default: FileSelected(e) } } else alert(t("E_NoFileSelected")) } $(function () { RoxyUtils.LoadConfig(), (new Directory).LoadAll(), $("#wraper").show(), window.setTimeout("initSelection()", 100), RoxyUtils.Translate(), $("body").click(function () { closeMenus() }); var e = RoxyUtils.GetCookie("roxyview"); if (e || (e = RoxyFilemanConf.DEFAULTVIEW), e && switchView(e), ResizeLists(), $(".actions input").tooltip({ track: !0 }), $(window).resize(ResizeLists), document.oncontextmenu = function () { return !1 }, removeDisabledActions(), $("#copyYear").html((new Date).getFullYear()), RoxyFilemanConf.UPLOAD && "" != RoxyFilemanConf.UPLOAD) { var t = document.getElementById("fileActions"); t.ondragover = function () { return !1 }, t.ondragend = function () { return !1 }, t.ondrop = function (e) { e.preventDefault(), e.stopPropagation(), dropFiles(e) }, (t = document.getElementById("dlgAddFile")).ondragover = function () { return !1 }, t.ondragend = function () { return !1 }, t.ondrop = function (e) { e.preventDefault(), e.stopPropagation(), dropFiles(e, !0) } } if ("tinymce3" == getFilemanIntegration()) try { $("body").append('<script src="js/tiny_mce_popup.js"><\/script>') } catch (e) { } });